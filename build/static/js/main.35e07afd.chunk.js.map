{"version":3,"sources":["chat/proxy.ts","chat/eventProducer.ts","chat/TextInput.tsx","chat/Login.tsx","chat/TextInputAndButton.tsx","chat/ConversationCard.tsx","chat/LeftPane.tsx","chat/MessageCard.tsx","chat/RightPane.tsx","chat/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","Error","filter","args","call","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","superSecretCode","displayNameOverride","alt","src","width","key","onClick","onEmailChange","href","preventDefault","sendPacket","staySignedIn","emailText","toLowerCase","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListener","LeftPane","user","tag","text","sendContactRequest","map","selectedConversation","firstMessage","c","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","onBack","id","senderId","onSend","referenceTo","contentType","Main","undefined","App","loggedIn","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.35e07afd.chunk.js","sourcesContent":["import { OutgoingPacket, InboxDto, IncomingPacket } from './chat';\r\nimport { EventProducer } from './eventProducer';\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap>\r\n{\r\n    private ws: WebSocket;\r\n\r\n    inbox: InboxDto | null = null;\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        \r\n        // this.ws = new WebSocket(\"ws://echo.websocket.org/\");\r\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\r\n\r\n        // this.ws.addEventListener(\"open\", () =>\r\n        // {\r\n        //     const obj = JSON.stringify({ type: \"login\", email: \"asd\" });\r\n        //     this.ws.send(obj);\r\n        // });\r\n        \r\n        this.ws.addEventListener(\"message\", e =>\r\n        {\r\n            const p = JSON.parse(e.data) as IncomingPacket;\r\n            // console.log(\"Received: \" + e.data);\r\n            switch (p.type)\r\n            {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    this.dispatch(\"message\", cid, p.message);\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch(\"conversation\", p.conversation.channelId);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    sendPacket(packet: OutgoingPacket)\r\n    {\r\n        // console.log(\"Sending: \" + JSON.stringify(packet));\r\n        this.ws.send(JSON.stringify(packet));\r\n    }\r\n}\r\n\r\nexport var proxy = new Proxy();","export class EventProducer<M>\r\n{\r\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\r\n\r\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object)\r\n    {\r\n        this.listeners.push({ type, listener, obj });\r\n    }\r\n\r\n    removeEventListener<K extends keyof M>(type: K, listener: M[K])\r\n    {\r\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\r\n    }\r\n\r\n    removeAllEventListener(obj: Object)\r\n    {\r\n        if (!obj)\r\n            throw new Error(\"Must specify object\");\r\n        \r\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\r\n    }\r\n\r\n    protected dispatch<K extends keyof M>(type: K, ...args)\r\n    {\r\n        for (let listener of this.listeners.filter(x => x.type === type))\r\n            listener.listener.call(listener.obj, ...args);\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport './TextInput.css';\r\n\r\nexport interface TextInputOptions\r\n{\r\n    value?: string;\r\n    onChange?: (value: string) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\nexport class TextInput extends Component<TextInputOptions>\r\n{\r\n    state = { value: this.props.value, focus: false };\r\n\r\n    render()\r\n    {\r\n        let attrs = {} as any;\r\n        if (this.props.autofocus)\r\n            attrs.autoFocus = true;\r\n        if (this.props.onEnter)\r\n            attrs.onKeyDown = e =>\r\n            {\r\n                if (e.keyCode === 13)\r\n                    this.props.onEnter!();\r\n            };\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input type={ this.props.type ?? \"text\" } value={ this.state.value }\r\n                    onChange={ e =>\r\n                    {\r\n                        this.setState( { value: e.target.value } );\r\n                        this.props.onChange?.( e.target.value );\r\n                    } }\r\n                    onBlur={ () => this.setState( { focus: false } ) }\r\n                    onFocus={ () => this.setState( { focus: true } ) }\r\n                    { ...attrs } />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={ this.state.value || this.state.focus ? \"subsided\" : \"\" }>\r\n                    { this.props.placeholder }\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { proxy } from './proxy';\r\nimport { TextInput } from './TextInput';\r\n\r\nexport class Login extends Component\r\n{\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n\r\n    superSecretCode = \"h9jvxo\";\r\n    displayNameOverride = \"Kristóf\";\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"login\">\r\n                <img alt=\"\" src=\"logo512.png\" width=\"256\" />\r\n                { this.state.register &&\r\n                    <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={ this.state.displayName } key={ this.state.displayName } onChange={ e => this.setState({ displayName: e }) } onEnter={ () => this.onClick() } /> }\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={ this.state.email } onChange={ e => this.onEmailChange(e) } onEnter={ () => this.onClick() } autofocus={ true } />\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={ this.state.password } onChange={ e => this.setState({ password: e }) } onEnter={ () => this.onClick() } />\r\n                <button type=\"button\" onClick={ () => this.onClick() }>{ this.state.register ? \"Register\" : \"Login\" }</button>\r\n                <p>{ this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \" }\r\n                    <a href=\"\" onClick={ e => { e.preventDefault(); this.setState({ register: !this.state.register }); } }>\r\n                        { this.state.register ? \"Login\" : \"Register\" }\r\n                    </a>\r\n                </p>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onClick()\r\n    {\r\n        if (this.state.register)\r\n            proxy.sendPacket({ type: \"register\", email: this.state.email, password: this.state.password, displayName: this.state.displayName, staySignedIn: false });\r\n        else\r\n            proxy.sendPacket({ type: \"login\", email: this.state.email, password: this.state.password, staySignedIn: false });\r\n    }\r\n\r\n    onEmailChange(emailText: string)\r\n    {\r\n        this.setState({ email: emailText });\r\n        if (emailText.toLowerCase() === this.superSecretCode)\r\n        {\r\n            this.setState({ displayName: this.displayNameOverride });\r\n        }\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { TextInputOptions, TextInput } from \"./TextInput\";\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions\r\n{\r\n    buttonContent?: string;\r\n    onClick?: (text: string) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n\r\n    onClick()\r\n    {\r\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\r\n            this.textInput.current?.setState({ value: \"\" });\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput { ...this.props } ref={ this.textInput } onEnter={ () => this.onClick() } />\r\n                <button type=\"button\" onClick={ () => this.onClick() }>\r\n                    { this.props.buttonContent }\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport { proxy } from \"./proxy\";\r\n\r\nexport class ConversationCard extends Component<{ conversation: ConversationDto, selected: boolean, onSelect: () => void }>\r\n{\r\n    render()\r\n    {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ? this.props.conversation.lastMessages[ this.props.conversation.lastMessages.length - 1 ] : null;\r\n        return (\r\n            <div className={ \"conversation-card\" + (this.props.selected ? \" selected\" : \"\") } onClick={ () => this.props.onSelect() }>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{ this.props.conversation.name }</span>\r\n                    <span className=\"time\">\r\n                        { lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString() }\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{ lastMessage?.content }</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener(\"message\", (cid, m) =>\r\n        {\r\n            if (cid === this.props.conversation.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { InboxDto, ConversationDto } from \"./chat\";\r\nimport { TextInputAndButton } from \"./TextInputAndButton\";\r\nimport { proxy } from \"./proxy\";\r\nimport { ConversationCard } from \"./ConversationCard\";\r\n\r\nexport class LeftPane extends Component<{ inbox: InboxDto, selectedConversation: ConversationDto | undefined, onSelect: (c: ConversationDto) => void }>\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: { this.props.inbox.user.tag }</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                    buttonContent=\"Inv\"\r\n                    onClick={ text => this.sendContactRequest(text) } />\r\n                <div className=\"conversations\">\r\n                    { this.props.inbox.conversations.map(x =>\r\n                        <ConversationCard\r\n                            key={ x.channelId }\r\n                            conversation={ x }\r\n                            selected={ x === this.props.selectedConversation }\r\n                            onSelect={ () => this.props.onSelect(x) } />\r\n                    ) }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    sendContactRequest(email: string)\r\n    {\r\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\r\n        return true;\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n}","import React, { PureComponent } from \"react\";\r\nimport { MessageDto } from \"./chat\";\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div className={ \"message-card\" + (this.props.own ? \" own\" : \"\") }>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{ this.props.message.content }</span>\r\n                    <span className=\"time\">\r\n                        { new Date(this.props.message.timeStamp).toLocaleTimeString() }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport { proxy } from \"./proxy\";\r\nimport { TextInputAndButton } from \"./TextInputAndButton\";\r\nimport { MessageCard } from \"./MessageCard\";\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                { this.props.conversation &&\r\n                    <>\r\n                        <div className=\"conversation-header row\">\r\n                            <button type=\"button\" className=\"only-narrow\" onClick={ () => this.props.onBack() }>Back</button>\r\n                            <p>{ this.props.conversation?.name }</p>\r\n                        </div>\r\n                        <div className=\"messages\">\r\n                            { this.props.conversation?.lastMessages.map(x =>\r\n                                <MessageCard key={ x.id } message={ x } own={ x.senderId === proxy.inbox?.user.id } /> \r\n                            ) }\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\" buttonContent=\"Send\" onClick={ x => this.onSend(x) } />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        proxy.addEventListener(\"message\", (cid, m) =>\r\n        {\r\n            if (cid === this.props.conversation?.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    onSend(text: string)\r\n    {\r\n        proxy.sendPacket({ type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: `H: ${text}` });\r\n        return true;\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport { proxy } from \"./proxy\";\r\nimport { LeftPane } from \"./LeftPane\";\r\nimport { RightPane } from \"./RightPane\";\r\n\r\nexport class Main extends Component\r\n{\r\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\r\n    \r\n    render()\r\n    {\r\n        let className = \"main row \" + ( this.state.selectedConversation ? \"right\" : \"left\" );\r\n        return (\r\n            <div className={ className }>\r\n                <LeftPane inbox={ proxy.inbox! } selectedConversation={ this.state.selectedConversation } onSelect={ c => this.setState({ selectedConversation: c }) } />\r\n                <RightPane conversation={ this.state.selectedConversation } onBack={ () => this.setState({ selectedConversation: undefined }) } />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport { Login } from './chat/Login';\nimport { proxy } from './chat/proxy';\nimport { Main } from './chat/Main';\n\nexport default class App extends Component\n{\n  state = { loggedIn: false };\n\n  render()\n  {\n    return (\n      <div className=\"app\">\n        { this.state.loggedIn ?  <Main /> : <Login /> }\n      </div>\n    );\n  }\n\n  componentDidMount()\n  {\n      proxy.addEventListener(\"login\", () => this.setState({ loggedIn: true }), this);\n  }\n\n  componentWillUnmount()\n  {\n      proxy.removeAllEventListener(this);\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './chat/proxy';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}